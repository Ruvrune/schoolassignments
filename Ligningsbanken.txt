NN, a middle school math teacher, is making a test. To reduce risk of cheating by sharing of answers among pupils, NN will autogenerate a large number of questions, so that each pupil gets different ones. NN will make a Python program for this purpose. One type of task for the pupils is simple line r equations ax + b = cx + d, where a, b, c, d are integers. Internally in the Python program, such equations may be represented as lists [a, b, c, d], but in questions shown to pupils they must be given as strings.

List to string

Write a function eq2text() which receives as argument a list of 4 integers and returns the corresponding equation as a string.

Examples of use:

Skjermbilde 2022-02-24 kl. 09.21.52.png
From the examples, please notice the following: If the coefficient before x is 1 or −1, the number 1 shall not be shown, only x or −x. If a constant is negative, as e.g. −1 as the last number in the list in the third example, the operatoren shall be − , you shall not have, e.g., '+ −1' in the string.

Boolean function to validate equation

Not all lists of 4 integers [a, b, c, d] will be viable as equations ax + b = cx + d. Write a boolean function ok(L) which receives as argument a list L of 4 integers.

The function shall return False if:

one or more elements in L are 0 (which would make parts disappear)
the first and third element in L are identical (which makes the equation insolvable)
the second and fourth element in L are identical (then, x=0 would trivially be the solution)
Otherwise, ok(L) shall return True.

Examples of usage:

Skjermbilde 2022-02-24 kl. 10.10.48.png

Make equations

To auto-generate many equations, NN wants to write a function which pulls random integers using the function randint() from the library random, e.g., randint(-9, 9) will give a random integer in the interval from -9 to +9, including both end points. NN wants a funksjon make_eq() to return a list with 4 random integers which can represent equations ax+b=cx+d. The function should use the ok() method,  that was made in the previous task, to validate the generated equation.

Assume now that make_eq() works as intended, giving a list of 4 integers [a, b, c, d] to represent an equation ax+b=cx+d. We shall now make a function make_n_eqs(n) which returns a list of n different equations that a student can get in the test.

Example of usage:

Skjermbilde 2022-02-24 kl. 11.18.00.png

As shown, with 3 as argument, the function returns a list with 3 inner lists, each representing an equation (in this case the three equations x+8=3x-2, -5x-2=2x+8, and -9x-1=-x-5). Notice that the function shall avoid giving two identical equations to the same student. Hence, the same inner list [a,b,c,d] must never occur twice in one outer list. Two lists [a,b,c,d] and [c,d,a,b] must not occur together either, since this will essentially be the same equation twice, only with left and right side swapped. Read Liang 7.2.4 about List slicing on how to handle this.

make_n_eqs(n) shall return a list with n inner lists representing n unique equations.

 

Add students

We now want a function make_test(students, n) which has two parameters:

students, a list of names for the students supposed to take the test
n, an integer stating how many equation each student is going to solve.
The function shall return a dictionary, where student names are keys, and the value for each key is the list of questions for that student.

Example usage of the function:


>>> make_test(['Ada','Bob'], 4)
{'Ada': [[3, -8, -7, 9], [1, -7, 5, -6], [5, 3, 4, -9], [-2, 5, -8, -2]],
'Bob': [[6, 1, -5, 5], [7, -3, 8, 8], [4, -9, -9, 2], [8, -1, -9, -8]]}

Write the code for the function make_test(). You can assume that functions given earlier, such as make_n_eqs(n) from the previous question, work as intended.

 

Answer questions

The function answer_questions(D) has as parameter a dictionary with student names and corresponding lists of lists for equations as shown earlier. The function shall ask a student to enter his/her name, and then ask the student to solve equations one by one.
Example usage of the function, assume parameter D contains:


{'Ada': [[-2,-3,3,-4], [-2,7,4,-7], [-4,8,-5,-9]], 'Bob': [[3,-9,-3,6], [1,2,5,-9], [-5,-4,-9,2]]}

A run where Ada takes the test, might then give the result as shown in the picture below. (Notice that she first mistypes her name - if the typed name does not match anything in D, the function shall simply ask for the name again)

Skjermbilde 2022-02-24 kl. 11.23.20.png


The function shall return a modified dictionary where the answers typed by the student has been added as the last element (here the fifth element) in each inner list representing the equations. With the run shown above, the function should return a dictionary with the content:


{'Ada': [[-2,-3,3,-4, 0.2 ], [-2,7,4,-7, 2.33 ], [-4,8,-5,-9, -17.0 ]], 'Bob': [[3,-9,-3,6], [1,2,5,-9], [-5,-4,-9,2]]}
 

Testprogram:


def main():



 tests = make_test(['Ola', 'Kari', 'Fredrik'], 5)

 ask_questions(tests)

 print(tests)
